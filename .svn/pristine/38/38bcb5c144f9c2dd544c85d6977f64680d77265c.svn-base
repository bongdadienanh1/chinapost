/*
 * Copyright 2013 NINGPAI, Inc.All rights reserved.
 * NINGPAI PROPRIETARY / CONFIDENTIAL.USE is subject to licence terms.
 */

package com.ylife.goods.service.impl;

import com.ylife.data.page.Page;
import com.ylife.data.page.PageBean;
import com.ylife.data.page.PageImpl;
import com.ylife.data.page.Pageable;
import com.ylife.goods.mapper.GoodsSpecMapper;
import com.ylife.goods.model.GoodsSpec;
import com.ylife.goods.model.GoodsSpecDetail;
import com.ylife.goods.model.GoodsSpecVo;
import com.ylife.goods.model.ValueUtil;
import com.ylife.goods.service.GoodsSpecDetailService;
import com.ylife.goods.service.GoodsSpecService;
import com.ylife.utils.MapUtil;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.*;

/**
 * 商品规格Service实现
 * 
 * @author NINGPAI-YuanKangKang
 * @since 2013年12月20日 上午9:48:53
 * @version
 */
@Service
public class GoodsSpecServiceImpl implements GoodsSpecService {
    // 商品分类的DAO
    @Resource
    private GoodsSpecMapper goodsSpecMapper;
    // 商品规格值Service
    @Resource
    private GoodsSpecDetailService goodsSpecDetailService;

    /**
     * 根据主键查询商品规格信息
     *
     * @param specId
     *            规格ID
     * @return 查询到的商品规格Vo的实体 {@link com.ysh.goods.vo.GoodsSpecVo}
     */
    public GoodsSpecVo queryBySpecPrimaryKey(Long specId) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("specId",specId);
        //根据规格ID查询Vo
        return this.goodsSpecMapper.querySpecVoBySpecId(map);
    }

    /**
     * 根据分页辅助Bean查询规格的分页列表
     *
     * @param pb
     *            分页帮助类 {@link com.ysh.util.PageBean}
     * @return 塞进列表的分页辅助类 {@link com.ysh.util.PageBean}
     */
    public PageBean qyerySpecListByPageBean(PageBean pb) {
        // 首先设置所有的行数
        pb.setRows(this.goodsSpecMapper.queryTotalCount());
        //定义一个HashMap集合
        Map<String, Integer> map = new HashMap<String, Integer>();
        try {
            //设置开始行数
            map.put(ValueUtil.STARTROWNUM, pb.getStartRowNum());
            //设置结束行数
            map.put(ValueUtil.ENDROWNUM, pb.getEndRowNum());
            //设置数据集合
            pb.setList(this.goodsSpecMapper.queryListByPageBean(map));
        } finally {
            // 参数指控
            map = null;
        }
        //返回结果
        return pb;
    }

    /**
     * 根据条件分页查询数据
     * @param goodsSpec
     * @param pb
     * @return
     */
    public Page<GoodsSpec> queryListForPageGoodsSpec(GoodsSpec goodsSpec, Pageable pb){
        Map<String,Object> paramMap = MapUtil.getParamsMap(goodsSpec);
        if(pb != null){
            paramMap.put("startRowNum", pb.getIndex());
            paramMap.put("endRowNum", pb.getLength());
        }
        // 标记是否使用模糊查询
        paramMap.put("check", "0");
        List<GoodsSpec> list = this.goodsSpecMapper.queryListForPageGoodsSpec(paramMap);
        int totalElements = goodsSpecMapper.queryCountGoodsSpec(goodsSpec);
        return new PageImpl<GoodsSpec>(pb, totalElements, list);
    }

    /**
     * 把传递过来的数组转换为规格值集合
     *
     * @param specDetailIds
     *            所有的规格值ID数组
     * @param specDetailDelflag
     *            所有的规格值的删除标记
     * @param specDetailName
     *            所有的规格值得名称
     * @param specDetailNickname
     *            所有的规格值得别名
     * @param specDetailImg
     *            所有的规格值的图片
     * @param specDetailSort
     *            所有的规格值的排序
     * @return 整理好的列表 {@link java.util.List}
     *         {@link com.ysh.goods.bean.GoodsSpecDetail}
     */
    @Transactional
    public List<GoodsSpecDetail> changeSpecDetail(String[] specDetailIds,
            String[] specDetailDelflag, String[] specDetailName,
            String[] specDetailNickname, String[] specDetailImg,
            String[] specDetailSort) {
        //定义一个规格集合
        List<GoodsSpecDetail> detailList = new ArrayList<GoodsSpecDetail>();
        GoodsSpecDetail specDetail = null;
        for (int i = 0; i < specDetailIds.length; i++) {
            specDetail = new GoodsSpecDetail();
            //设置规格id
            specDetail.setSpecDetailId(Long.parseLong(specDetailIds[i]));
            //设置规格删除标记
            specDetail.setSpecDetailDelflag(specDetailDelflag[i]);
            //设置规格名称
            specDetail.setSpecDetailName(specDetailName[i]);
            // specDetail.setSpecDetailNickname(specDetailNickname[i]);
            // specDetail.setSpecDetailImg(specDetailImg[i]);
            specDetail.setSpecDetailSort(Integer.parseInt(specDetailSort[i]));
            detailList.add(specDetail);
        }
        //返回结果
        return detailList;
    }

    /**
     * 查询所有的商品规格
     *
     * @return 查询到的规格列表
     */
    public List<GoodsSpec> queryAllSpec() {
        //查询所有的商品规格
        return this.goodsSpecMapper.queryAllSpec();
    }

    /**
     * 根据商品ID查询关联的规格Vo
     *
     * @param goodsId
     *            商品ID {@link java.lang.Long}
     * @return 查询到的列表 {@link java.util.List}
     *         {@link com.ysh.goods.vo.GoodsSpecVo}
     */
    public List<GoodsSpecVo> querySpecVoByGoodsId(Long goodsId) {
        //根据商品ID查询关联的规格VO
        return this.goodsSpecMapper.querySpecVoByGoodsId(goodsId);
    }

    /**
     * 查询所有的商品规格包含删除的
     *
     * @return 查询到的规格列表
     */
    public List<GoodsSpec> queryAllSpecIncludeDel() {
        //查询所有的商品规格包含删除的
        return this.goodsSpecMapper.queryAllSpecIncludeDel();
    }

    /**
     * 验证规格名称是否可用
     *
     * @param specName
     *            待验证的规格名称 {@link java.lang.String}
     * @return 可用返回true 不可用返回false
     */
    public boolean checkSpecName(String specName) {
        //根据规格名称查询行数
        return this.goodsSpecMapper.queryCountBySpecName(specName) > 0 ? false
                : true;
    }

    /**
     * 保存规格信息
     *
     * @param goodsSpec
     *            规格信息
     * @param username
     *            用户名
     */
    @Override
    public void saveGoodsSpec(GoodsSpec goodsSpec, String username) {
        // 设置规格的创建人名称为传递过来的名称
        goodsSpec.setSpecDelflag("0");
        goodsSpec.setSpecCreateName(username);
        //插入规格记录
        this.goodsSpecMapper.insert(goodsSpec);
    }

    /**
     * 修改规格信息
     *
     * @param goodsSpec
     *            规格信息
     * @param username
     *            用户名
     */
    @Override
    public void updateGoodsSpec(GoodsSpec goodsSpec, String username) {
        goodsSpec.setSpecModifiedName(username);
        Map<String,Object> paramMap = MapUtil.getParamsMap(goodsSpec);
        if(goodsSpec.getSpecIds() !=null && goodsSpec.getSpecIds().length > 0){
            paramMap.put("ids", Arrays.asList(goodsSpec.getSpecIds()));
            paramMap.put("specDelflag","1");
        }
        //更新规格
        this.goodsSpecMapper.updateByPrimaryKeySelective(paramMap);
    }

}
