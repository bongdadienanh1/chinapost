package com.ylife.chinapost.third.controller;

import com.alibaba.fastjson.JSON;
import com.ylife.chinapost.third.controller.utils.Constants;
import com.ylife.chinapost.third.service.CurrentLoginService;
import com.ylife.chinapost.third.service.OrderManageService;
import com.ylife.data.json.message.JsonResponseBean;
import com.ylife.data.page.Page;
import com.ylife.data.page.Pageable;
import com.ylife.exception.UserNotLoginException;
import com.ylife.order.model.*;
import com.ylife.utils.DateUtil;
import com.ylife.utils.ExcelUtilXssf;
import com.ylife.utils.StringUtil;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.util.*;

/**
 * Created by InThEnd on 2016/5/4.
 * 订单管理控制器
 */
@Controller
@RequestMapping(value = "/orderManage")
public class OrderManageAPIController {

    @Resource
    private OrderManageService orderManageService;

    @Resource
    private CurrentLoginService currentLoginService;

    @ExceptionHandler(UserNotLoginException.class)
    public String handlerUserNotLoginException() {
        return  "redirect:/login";
    }

    /**
     * 获取订单。
     *
     * @param orderNo      订单号
     * @param status       订单状态
     * @param username     用户名
     * @param receiver     收货人
     * @param contactPhone 联系电话
     * @param createStart  创建开始时间
     * @param createEnd    创建结束时间
     * @param payStart     支付开始时间
     * @param payEnd       支付结束时间
     * @param page         页数
     * @param size         页大小
     */
    @RequestMapping(value = "/getOrders")
    public String getOrders(HttpServletRequest request,
                            @RequestParam(value = "orderNo", required = false) Long orderNo,
                            @RequestParam(value = "status", required = false) OrderStatus status,
                            @RequestParam(value = "username", required = false) String username,
                            @RequestParam(value = "receiver", required = false) String receiver,
                            @RequestParam(value = "contactPhone", required = false) String contactPhone,
                            @RequestParam(value = "createStart", required = false) String createStart,
                            @RequestParam(value = "createEnd", required = false) String createEnd,
                            @RequestParam(value = "payStart", required = false) String payStart,
                            @RequestParam(value = "payEnd", required = false) String payEnd,
                            @RequestParam(value = "page", required = false, defaultValue = "1") int page,
                            @RequestParam(value = "size", required = false, defaultValue = "10") int size) {
        if (status != null && status == OrderStatus.WAIT_DELIVER) {
            status = OrderStatus.PAYED;
        } else if (status != null && status == OrderStatus.WAIT_PICKUP) {
            status = OrderStatus.PAYED;
        }
        username = Constants.nullOrNotBlank(username);
        receiver = Constants.nullOrNotBlank(receiver);
        contactPhone = Constants.nullOrNotBlank(contactPhone);

        Date createStartTime = null;
        if (!StringUtil.isBlank(createStart)) {
            createStartTime = DateUtil.fromString(createStart, Constants.DEFAULT_DATE_FORMAT);
        }
        Date createEndTime = null;
        if (!StringUtil.isBlank(createEnd)) {
            createEndTime = DateUtil.fromString(createEnd, Constants.DEFAULT_DATE_FORMAT);
        }

        Date payStartTime = null;
        if (!StringUtil.isBlank(payStart)) {
            payStartTime = DateUtil.fromString(payStart, Constants.DEFAULT_DATE_FORMAT);
        }
        Date payEndTime = null;
        if (!StringUtil.isBlank(payEnd)) {
            payEndTime = DateUtil.fromString(payEnd, Constants.DEFAULT_DATE_FORMAT);
        }


        Page<Order> pageBean = orderManageService.getOrders(
                orderNo,
                status,
                null,
                username,
                receiver,
                contactPhone,
                createStartTime,
                createEndTime,
                payStartTime,
                payEndTime,
                currentLoginService.getCurrentLoginThirdId(),
                "1",
                new Pageable(page, size));

        request.setAttribute("orderNo",orderNo);
        request.setAttribute("status",status);
        request.setAttribute("username",username);
        request.setAttribute("receiver",receiver);
        request.setAttribute("contactPhone",contactPhone);
        request.setAttribute("createStart",createStart);
        request.setAttribute("createEnd",createEnd);
        request.setAttribute("payStart",payStart);
        request.setAttribute("payEnd",payEnd);
        request.setAttribute("pageBean",pageBean);
        request.setAttribute("firstNav", '2');
        request.setAttribute("twoNav", '1');
        return "thirdOrderList";
    }


    /**
     * 获取所有退货单。
     *
     * @param backOrderNo 退单号
     * @param phoneNo     手机号码
     * @param orderNo     订单号
     * @param status      状态
     * @param start       开始时间
     * @param end         结束时间
     */
    @RequestMapping(value = "/getBackOrders")
    public String getBackOrders(HttpServletRequest request,@RequestParam(value = "backOrderNo", required = false) Long backOrderNo,
                                @RequestParam(value = "phoneNo", required = false) String phoneNo,
                                @RequestParam(value = "orderNo", required = false) Long orderNo,
                                @RequestParam(value = "status", required = false) CreditOrderStatus status,
                                @RequestParam(value = "start", required = false) String start,
                                @RequestParam(value = "end", required = false) String end,
                                @RequestParam(value = "page", required = false,defaultValue = "1") int page,
                                @RequestParam(value = "size", required = false,defaultValue = "10") int size) {
        phoneNo = Constants.nullOrNotBlank(phoneNo);
        Date startTime = null;
        if (!StringUtil.isBlank(start)) {
            startTime = DateUtil.fromString(start, Constants.DEFAULT_DATE_FORMAT);
        }
        Date endTime = null;
        if (!StringUtil.isBlank(end)) {
            endTime = DateUtil.fromString(end, Constants.DEFAULT_DATE_FORMAT);
        }

        Page<CreditOrder> pageBean = orderManageService.getBackOrder(backOrderNo, phoneNo, orderNo, status, startTime, endTime,currentLoginService.getCurrentLoginThirdId(),"1", new Pageable(page, size));
        request.setAttribute("orderNo",orderNo);
        request.setAttribute("status",status);
        request.setAttribute("backOrderNo",backOrderNo);
        request.setAttribute("phoneNo",phoneNo);
        request.setAttribute("start",start);
        request.setAttribute("end",end);
        request.setAttribute("pageBean",pageBean);
        return "thirdOrderBackList";
    }


    //审核退货
    @RequestMapping(value = "/reviewCreditOrder")
    @ResponseBody
    public String reviewCreditOrder(@RequestParam(value = "creditOrderNo") long creditOrderNo,
                                    @RequestParam(value = "agree") boolean agree,
                                    @RequestParam(value = "message", required = false) String message) {
        orderManageService.reviewCreditOrder(creditOrderNo, agree, message);
        return JsonResponseBean.getSuccessResponse().toJson();
    }

    //企业收货
    @RequestMapping(value = "/receiveCreditOrder")
    @ResponseBody
    public String receiveCreditOrder(@RequestParam(value = "creditOrderNo") long creditOrderNo,
                                     @RequestParam(value = "receive") boolean receive,
                                     @RequestParam(value = "enterpriseMsg", required = false) String enterpriseMsg,
                                     @RequestParam(value = "customerMsg", required = false) String customerMsg) {
        orderManageService.receiveCreditOrder(creditOrderNo, receive, enterpriseMsg, customerMsg);
        return JsonResponseBean.getSuccessResponse().toJson();
    }

    //给客户退款
    @RequestMapping(value = "/refund")
    @ResponseBody
    public String refund(@RequestParam(value = "creditOrderNo") long creditOrderNo,
                         @RequestParam(value = "price") BigDecimal price,
                         @RequestParam(value = "msg", required = false) String msg,
                         @RequestParam(value = "backSubsidyPrice", required = false) BigDecimal backSubsidyPrice
                         ) {
        orderManageService.refund(creditOrderNo, price, msg, backSubsidyPrice);
        return JsonResponseBean.getSuccessResponse().toJson();
    }

    /**
     * 获取订单商品详情
     * */

    @RequestMapping(value = "/getOrderGoods")
    public String getOrderGoods(HttpServletRequest request,Long orderId){
        request.setAttribute("orderGoods",orderManageService.getOrderGoods(orderId));
        request.setAttribute("firstNav", '2');
        request.setAttribute("twoNav", '1');
//        return new JsonResponseBean().leave("orderGoodsList",
//                                    "orderId",
//                                    "goodsInfoNum",
//                                    "goodsInfoName",
//                                    "goodsImg",
//                                    "goodsProductReleSpecVoList",
//                                    "specValueRemark",
//                                    "spec",
//                                    "specName",
//                                    "goodsSpecDetail",
//                                    "specDetailName").toJson();
        return "orderListDetail";
    }

    /**
     * 获取退单商品详情
     * */

    @RequestMapping(value = "/getBackOrderGoods", produces = "application/json;charset=utf-8")
    @ResponseBody
    public String getBackOrderGoods(long orderId){
        List<BackOrderGoods> list=orderManageService.getBackOrderGoodsByOrderId(orderId);
        return new JsonResponseBean(list).toJson();
    }


    /**
     * 导出订单
     * @param status
     * @param username
     * @param receiver
     * @param contactPhone
     * @param createStart
     * @param createEnd
     * @param payStart
     * @param payEnd
     * @param response
     * @throws IOException
     */
    @RequestMapping(value = "/orderDown")
    public void exportOrderExcel(@RequestParam(value = "status", required = false) OrderStatus status,
                                 @RequestParam(value = "username", required = false) String username,
                                 @RequestParam(value = "receiver", required = false) String receiver,
                                 @RequestParam(value = "contactPhone", required = false) String contactPhone,
                                 @RequestParam(value = "createStart", required = false) String createStart,
                                 @RequestParam(value = "createEnd", required = false) String createEnd,
                                 @RequestParam(value = "payStart", required = false) String payStart,
                                 @RequestParam(value = "payEnd", required = false) String payEnd,
                                 HttpServletResponse response
    ) throws IOException {
        if (status != null && status == OrderStatus.WAIT_DELIVER) {
            status = OrderStatus.PAYED;
        } else if (status != null && status == OrderStatus.WAIT_PICKUP) {
            status = OrderStatus.PAYED;
        }
        username = Constants.nullOrNotBlank(username);
        receiver = Constants.nullOrNotBlank(receiver);
        contactPhone = Constants.nullOrNotBlank(contactPhone);
        Date createStartTime = null;
        if (!StringUtil.isBlank(createStart)) {
            createStartTime = DateUtil.fromString(createStart, Constants.DEFAULT_DATE_FORMAT);
        }
        Date createEndTime = null;
        if (!StringUtil.isBlank(createEnd)) {
            createEndTime = DateUtil.fromString(createEnd, Constants.DEFAULT_DATE_FORMAT);
        }

        Date payStartTime = null;
        if (!StringUtil.isBlank(payStart)) {
            payStartTime = DateUtil.fromString(payStart, Constants.DEFAULT_DATE_FORMAT);
        }
        Date payEndTime = null;
        if (!StringUtil.isBlank(payEnd)) {
            payEndTime = DateUtil.fromString(payEnd, Constants.DEFAULT_DATE_FORMAT);
        }
        Page<Order> orderPage = orderManageService.getOrders(null,status, null, username, receiver, contactPhone, createStartTime, createEndTime, payStartTime, payEndTime,currentLoginService.getCurrentLoginThirdId(),"1", null);
        List<Order> orderList = orderPage.getContent();

        SXSSFWorkbook wb = new SXSSFWorkbook(1000);
        String sheetName = "订单表-明细表";
        List<String> heads = Arrays.asList("订单号", "下单用户身份证号", "下单用户姓名", "下单时间", "付款时间",
                "商品名称", "购买数量", "订单金额", "订单状态",
                "收件人姓名", "收件人电话", "收件人地址","快递公司",
                "快递单号", "用户支付金额");
        List<List<String>> bodyList = new ArrayList<List<String>>();

        int ignoreRow = 0;
        for (Order order : orderList) {
            List<String> sonList = new ArrayList<String>();
            sonList.add(String.valueOf(order.getOrderCode()));
            sonList.add(order.getCustomerInfo().getUsername());
            sonList.add(order.getCustomerInfo().getFullName());
            Date createTime = order.getCreateTime();
            sonList.add(order.getCreateTime() == null ? "" : DateUtil.formatToString(createTime, "yyyy/MM/dd HH:mm"));
            Date payTime = order.getPayTime();
            sonList.add(order.getPayTime() == null ? "" : DateUtil.formatToString(payTime, "yyyy/MM/dd HH:mm"));
            List<OrderGoods> orderGoodsList = order.getOrderGoodsList();
            String goodsNameString = "";
            Long amount = 0L;
            for (OrderGoods orderGoods : orderGoodsList) {
                String goodsName = orderGoods.getGoodsInfoName() + "(" + orderGoods.getGoodsInfoNum() + ")";
                goodsNameString += goodsName + ",";
                amount += orderGoods.getGoodsInfoNum();
            }
            goodsNameString = goodsNameString.substring(0, goodsNameString.length() - 1);
            sonList.add(goodsNameString);
            sonList.add(String.valueOf(amount));
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            String orderPrice = decimalFormat.format(order.getOrderPrice());
            sonList.add(orderPrice);
            sonList.add(order.getOrderStatus().toString());
            sonList.add(order.getShippingPerson());
            sonList.add(order.getShippingMobile());
            String province = order.getShippingProvince();
            String city = order.getShippingCity();
            String district = order.getShippingCounty();
            String detailAddress = order.getShippingAddress();
            String address = province + city + district + detailAddress;
            sonList.add(address);
            List<OrderContainerRelation> orderContainerRelationList = order.getOrderContainerRelations();
            if (orderContainerRelationList.size() != 0) {
                OrderContainerRelation orderContainerRelation = orderContainerRelationList.get(0);

                sonList.add(orderContainerRelation.getExpressName());

                sonList.add(orderContainerRelation.getExpressNo());
            } else {

                sonList.add("");

                sonList.add("");

            }
            String orderPrice1 = decimalFormat.format(order.getOrderPrice().subtract(order.getSubsidyPrice() == null ? BigDecimal.ZERO : order.getSubsidyPrice()).doubleValue());
            sonList.add(orderPrice1);

            String SubsidyPrice = decimalFormat.format(order.getSubsidyPrice() == null ? BigDecimal.ZERO : order.getSubsidyPrice());
            sonList.add(SubsidyPrice);
            bodyList.add(sonList);
        }

        wb = ExcelUtilXssf.excelExport(wb, heads, bodyList, 0, ignoreRow, sheetName);
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("wb", wb);
        String excelName = sheetName+".xlsx";
        try {
            excelName = URLEncoder.encode(excelName, "UTF8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        response.setContentType("application/vnd.ms-excel");
        response.setHeader("Content-disposition", "attachment;filename=" + excelName);
        OutputStream ouputStream = response.getOutputStream();
        wb.write(ouputStream);
        ouputStream.flush();
        ouputStream.close();

    }

    /**
     * 导入快递单模板导出
     * @param response
     * @throws IOException
     */
    @RequestMapping(value = "/exportTemplate")
    public void exportTemplate(HttpServletResponse response) throws IOException{
        SXSSFWorkbook wb = new SXSSFWorkbook(1000);
        String sheetName = "导入快递单模板";
        List<String> heads = Arrays.asList("订单号", "收货手机号", "快递公司", "快递单号");
        wb = ExcelUtilXssf.excelExport(wb, heads, null, 0, 0, sheetName);
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("wb", wb);
        String excelName = sheetName+".xlsx";
        try {
            excelName = URLEncoder.encode(excelName, "UTF8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        response.setContentType("application/vnd.ms-excel");
        response.setHeader("Content-disposition", "attachment;filename=" + excelName);
        OutputStream ouputStream = response.getOutputStream();
        wb.write(ouputStream);
        ouputStream.flush();
        ouputStream.close();
    }

    /**
     * 导入快递单
     * @param request
     * @param file
     * @return
     * @throws IOException
     * @throws InvalidFormatException
     */
    @RequestMapping(value = "/importExpress")
    public String importExpress(HttpServletRequest request,MultipartFile file) throws IOException, InvalidFormatException {
        Map<String,Object> map = orderManageService.parseFile(request,file);
        return JSON.toJSONString(map);
    }
}
