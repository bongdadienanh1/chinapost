package com.ylife.chinapost.boss.controller;

import com.google.gson.reflect.TypeToken;
import com.ylife.chinapost.boss.controller.utils.Constants;
import com.ylife.chinapost.boss.service.GoodsBrandBossService;
import com.ylife.data.json.message.JsonResponseBean;
import com.ylife.data.page.Page;
import com.ylife.data.page.Pageable;
import com.ylife.goods.model.GoodsBrand;
import com.ylife.utils.Assert;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * Created by Administrator on 2017/6/30.
 * 商品品牌管理
 */
@Controller
@RequestMapping(value = "/GoodsBrand")
public class GoodsBrandController {

	@Resource
	GoodsBrandBossService goodsBrandBossService;

	private final String MODULE_PATH = "/";

	public static final String NAME = "name";


	private String returnPath(String jspName) {
		return MODULE_PATH+ jspName;
	}

	/**
	 * 获取商品品牌
	 * @param brandName
	 * @param brandNickname
	 * @param page
	 * @param size
	 * @return
	 */
	@RequestMapping(value = "/getGoodsBrand", produces = "application/json;charset=utf-8")
	@ResponseBody
	public ModelAndView getGoodsBrands(@RequestParam(value = "brandName", required = false) String brandName,
	                             @RequestParam(value = "brandNickname", required = false) String brandNickname,
	                             @RequestParam(value = "page", required = false, defaultValue = "1") int page,
	                             @RequestParam(value = "size", required = false, defaultValue = "10") int size){
		brandName = Constants.nullOrNotBlank(brandName);
		brandNickname = Constants.nullOrNotBlank(brandNickname);
		Page<GoodsBrand> pageList = goodsBrandBossService.queryBrandByNameOrBrandNickname(brandName, brandNickname, new Pageable(page, size));
		return new ModelAndView(returnPath("GoodsBrand")).addObject("pageBean",pageList);
	}

	/**
	 * 添加商品品牌
	 * @param brandName
	 * @param brandNickname
	 * @param brandUrl
	 * @param brandSort
	 * @return
	 */
	@RequestMapping(value = "/saveGoodsBrand", produces = "application/json;charset=utf-8")
	@ResponseBody
	public String saveGoodsBrand(@RequestParam(value = "brandName") String brandName,
	                             @RequestParam(value = "brandNickname", required = false) String brandNickname,
	                             @RequestParam(value = "brandLogo", required = false) String brandLogo,
	                             @RequestParam(value = "brandSort") String brandSort, HttpServletRequest request){
		String userName = (String) request.getSession().getAttribute(NAME);
		Assert.notNull(brandName);
		Assert.notNull(brandSort);
		brandNickname = Constants.nullOrNotBlank(brandNickname);
		brandLogo = Constants.nullOrNotBlank(brandLogo);
		goodsBrandBossService.insertGoodsBrand(brandName,brandNickname, brandLogo, Integer.valueOf(brandSort), userName);
		return new JsonResponseBean().toJson();
	}

	/**
	 * 批量删除商品品牌
	 * @param brandIds
	 * @return
	 */
	@RequestMapping(value = "/deleteGoodsBrand", produces = "application/json;charset=utf-8")
	@ResponseBody
	public String deleteGoodsBrand(@RequestParam(value = "brandIds", required = false) String brandIds, HttpServletRequest request){
		String deleteName = (String) request.getSession().getAttribute(NAME);
		for (String brandId : brandIds.split(",")) {
			goodsBrandBossService.deleteGoodsBrand(Long.valueOf(brandId), deleteName);
		}
		return new JsonResponseBean().toJson();
	}

	/**
	 * 删除一条商品品牌
	 * @param brandId
	 * @return
	 */
	@RequestMapping(value = "/deleteOneGoodsBrand", produces = "application/json;charset=utf-8")
	@ResponseBody
	public String deleteOneGoodsBrand(@RequestParam("brandId") String brandId, HttpServletRequest request){
		String deleteName = (String) request.getSession().getAttribute(NAME);
		goodsBrandBossService.deleteGoodsBrand(Long.valueOf(brandId), deleteName);
		return new JsonResponseBean().toJson();
	}

	/**
	 * 修改商品品牌信息
	 * @param brandId
	 * @param brandName
	 * @param brandNickname
	 * @param brandUrl
	 * @param brandSort
	 * @return
	 */
	@RequestMapping(value = "/editGoodsBrand", produces = "application/json;charset=utf-8")
	@ResponseBody
	public String editGoodsBrand(@RequestParam(value = "brandId") String brandId,
	                             @RequestParam(value = "brandName") String brandName,
	                             @RequestParam(value = "brandNickname", required = false) String brandNickname,
	                             @RequestParam(value = "brandUrl", required = false) String brandUrl,
	                             @RequestParam(value = "brandSort") String brandSort, HttpServletRequest request){
		String userName = (String) request.getSession().getAttribute(NAME);
		Assert.notNull(brandName);
		Assert.notNull(brandSort);
		brandNickname = Constants.nullOrNotBlank(brandNickname);
		brandUrl = Constants.nullOrNotBlank(brandUrl);
		goodsBrandBossService.updateGoodsBrad(Long.valueOf(brandId), brandName, brandNickname, brandUrl, Integer.valueOf(brandSort), userName);
		return new JsonResponseBean().toJson();
	}

	/**
	 * 查询所有品牌信息
	 *
	 * @return
	 */
	@RequestMapping(value = "/queryAllBrand", produces = "application/json;charset=utf-8")
	@ResponseBody
	public List<GoodsBrand> queryAllBrandList() {
		// 执行方法并返回结果
		return goodsBrandBossService.queryAllBrand();
	}


	/**
	 * 检查品牌是否存在
	 * @param brandName
	 * @return
	 */
	@RequestMapping(value = "/selectByBrandName", produces = "application/json;charset=utf-8")
	@ResponseBody
	public String selectByBrandName(@RequestParam(value = "brandName") String brandName) {
		return new JsonResponseBean(goodsBrandBossService.selectByBrandName(brandName)).toJson();
	}


	/**
	 * 查询GoodsBrand
	 * @author henry
	 * @date 2017-06-30 18:46:32
	 * */
	@RequestMapping(value = "/queryBrandById", produces = "application/json;charset=utf-8")
	@ResponseBody
	public String findGoodsBrand(String brandId) {
		GoodsBrand goodsBrand = goodsBrandBossService.queryBrandById(Long.parseLong(brandId));
		return new JsonResponseBean(goodsBrand).toJson();
	}


}
